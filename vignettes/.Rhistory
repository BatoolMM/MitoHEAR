devtools::check(vignettes=TRUE)
test_package("MitoHEAR","testthat")
library(testthat)
test_package("MitoHEAR","testthat")
devtools::check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
devtools::install(build_vignettes = TRUE)
vignette("MitoHEAR")
devtools::check(vignettes=TRUE)
?get_heteroplasmy
library(MitoHEAR)
?get_raw_counts_allele
vignette("MitoHEAR")
vignette("MitoHEAR")
devtools::install(build_vignettes = TRUE)
vignette("MitoHEAR")
devtools::build(vignettes = TRUE)
vignette("MitoHEAR")
getwd()
devtools::build("/Users/gabriele.lubatti/MitoHEAR")
vignette("MitoHEAR")
getwd()
library(MitoHEAR)
load(system.file("extdata", "after_qc.Rda", package = "MitoHEAR"))
cell_names =  as.vector(after_qc$new_name)
load(system.file("extdata", "output_SNP_mt.Rda", package = "MitoHEAR"))
matrix_allele_counts =  output_SNP_mt[[1]]
name_position_allele =  output_SNP_mt[[2]]
name_position =  output_SNP_mt[[3]]
row.names(after_qc) =  after_qc$new_name
cells_fmk_epi =  after_qc[(after_qc$condition == "Cell competition OFF")&(after_qc$cluster == 1|after_qc$cluster == 3|after_qc$cluster == 4), "new_name"]
after_qc_fmk_epi =  after_qc[cells_fmk_epi, ]
my.clusters =  after_qc_fmk_epi$cluster
epiblast_ci =  get_heteroplasmy(matrix_allele_counts[cells_fmk_epi, ], name_position_allele, name_position, number_reads = 50, number_positions = 2000, filtering = 2, my.clusters)
sum_matrix =  epiblast_ci[[1]]
sum_matrix_qc =  epiblast_ci[[2]]
heteroplasmy_matrix_ci =  epiblast_ci[[3]]
allele_matrix_ci =  epiblast_ci[[4]]
cluster_ci =  as.character(after_qc[row.names(heteroplasmy_matrix_ci), ]$cluster)
cluster_ci[cluster_ci == "1"] = "Winner Epiblast"
cluster_ci[cluster_ci == "3"] = "Intermediate"
cluster_ci[cluster_ci == "4"] = "Loser Epiblast"
condition_ci =  as.character(after_qc[row.names(heteroplasmy_matrix_ci), ]$condition)
index_ci =  epiblast_ci[[5]]
MitoHEAR:::plot_cells_coverage_epiblast(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=FALSE)
MitoHEAR:::plot_cells_coverage_epiblast(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
MitoHEAR:::plot_cells_coverage(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
plot_cells_coverage(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
sum_matrix=sum_matrix_qc
cells_selected=row.names(sum_matrix_qc)
cluster=cluster_ci
interactive=TRUE
cells_sum <- apply(sum_matrix[cells_selected, ], 1, sum)
cells_sum <- cells_sum/1000
cell_id <- names(cells_sum)
df <- data.frame(cell_id, cells_sum, cluster)
row.names(df) <- cell_id
df <- df[order(cells_sum, decreasing = T), ]
cell_id_plot <- factor(row.names(df), levels = row.names(df))
cluster_plot_plot <- factor(df[, 3], levels = c("Winner Epiblast", "Intermediate", "Loser Epiblast"))
color_plot <- df[, 3]
color_plot[df[, 3] == "Winner Epiblast"] <- "#DD6400"
color_plot[df[, 3] == "Intermediate"] <- "#0000FF"
color_plot[df[, 3] == "Loser Epiblast"] <- "#006400"
fig <- plotly::plot_ly(
x <- (cell_id_plot),
y <- df[,2],
name <- "Cluster",
type <- "bar",
marker <- list(color = color_plot))
cell_id_plot
df[,2]
cell_id_plot
as.vector(cell_id_plot)
fig <- plotly::plot_ly(
x <- as.vector(cell_id_plot),
y <- df[,2],
name <- "Cluster",
type <- "bar",
marker <- list(color = color_plot))
fig <- plotly::plot_ly(
x <- as.vector(cell_id_plot),
y <- df[,2],
name <- "Cluster",
type <- "bar",
marker <- list(color = color_plot))
color_plot
length(cell_id_plot)
length(df[,2])
length(color_plot)
fig <- plotly::plot_ly(
x = as.vector(cell_id_plot),
y = df[,2],
name = "Cluster",
type = "bar",
marker <- list(color = color_plot))
df
head(df)
fig <- plotly::plot_ly(
data = df,
x = df[,1]
y = df[,2],
fig <- plotly::plot_ly(
data = df,
x = df[,1],
y = df[,2],
name = "Cluster",
type = "bar",
marker <- list(color = color_plot))
fig <- fig %>% plotly::layout(title = "MT coverage per cell",
xaxis = list(title = "Cells"),
yaxis = list(title = "MT coverage per thousand reads"))
plot_cells_coverage_epiblast_here = function(sum_matrix, cells_selected, cluster, interactive = FALSE) {
sum_matrix=sum_matrix_qc
cells_selected=row.names(sum_matrix_qc)
cluster=cluster_ci
interactive=TRUE
cells_sum <- apply(sum_matrix[cells_selected, ], 1, sum)
cells_sum <- cells_sum/1000
cell_id <- names(cells_sum)
df <- data.frame(cell_id, cells_sum, cluster)
row.names(df) <- cell_id
df <- df[order(cells_sum, decreasing = T), ]
cell_id_plot <- factor(row.names(df), levels = row.names(df))
cluster_plot_plot <- factor(df[, 3], levels = c("Winner Epiblast", "Intermediate", "Loser Epiblast"))
if (interactive == FALSE) {
p <- ggplot2::ggplot(data = df, ggplot2::aes(x = cell_id_plot, y = df[, 2], fill = cluster_plot_plot)) +
ggplot2::geom_bar(stat = "identity", ) +
ggplot2::theme_minimal() + ggplot2::ylab("MT coverage per thousand reads") + ggplot2::xlab("Cells") +
ggplot2::ggtitle("MT coverage per cell") + ggplot2::scale_fill_manual(values = c("#DD6400", "#0000FF", "#006400"),
labels = c("Winner Epiblast", "Intermediate", "Loser Epiblast")) + ggplot2::labs(fill = "Category") +
ggplot2::theme(axis.text.x = ggplot2::element_blank(), axis.ticks.x = ggplot2::element_blank()) + ggplot2::xlab("Cells")
return(list(p))
}
if (interactive == TRUE) {
if (! requireNamespace("plotly", quietly = TRUE)) {
stop("Package plotly needed for interactive == TRUE. Please install it: install.packages('plotly') or set interactive == FALSE")
}
color_plot <- df[, 3]
color_plot[df[, 3] == "Winner Epiblast"] <- "#DD6400"
color_plot[df[, 3] == "Intermediate"] <- "#0000FF"
color_plot[df[, 3] == "Loser Epiblast"] <- "#006400"
fig <- plotly::plot_ly(
data = df,
x = df[,1],
y = df[,2],
name = "Cluster",
type = "bar",
marker <- list(color = color_plot))
fig <- fig %>% plotly::layout(title = "MT coverage per cell",
xaxis = list(title = "Cells"),
yaxis = list(title = "MT coverage per thousand reads"))
return(list(fig))}
}
MitoHEAR:::plot_cells_coverage_epiblast_here(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
plot_cells_coverage_epiblast_here = function(sum_matrix, cells_selected, cluster, interactive = FALSE) {
sum_matrix=sum_matrix_qc
cells_selected=row.names(sum_matrix_qc)
cluster=cluster_ci
interactive=TRUE
cells_sum <- apply(sum_matrix[cells_selected, ], 1, sum)
cells_sum <- cells_sum/1000
cell_id <- names(cells_sum)
df <- data.frame(cell_id, cells_sum, cluster)
row.names(df) <- cell_id
df <- df[order(cells_sum, decreasing = T), ]
cell_id_plot <- factor(row.names(df), levels = row.names(df))
cluster_plot_plot <- factor(df[, 3], levels = c("Winner Epiblast", "Intermediate", "Loser Epiblast"))
if (interactive == FALSE) {
p <- ggplot2::ggplot(data = df, ggplot2::aes(x = cell_id_plot, y = df[, 2], fill = cluster_plot_plot)) +
ggplot2::geom_bar(stat = "identity", ) +
ggplot2::theme_minimal() + ggplot2::ylab("MT coverage per thousand reads") + ggplot2::xlab("Cells") +
ggplot2::ggtitle("MT coverage per cell") + ggplot2::scale_fill_manual(values = c("#DD6400", "#0000FF", "#006400"),
labels = c("Winner Epiblast", "Intermediate", "Loser Epiblast")) + ggplot2::labs(fill = "Category") +
ggplot2::theme(axis.text.x = ggplot2::element_blank(), axis.ticks.x = ggplot2::element_blank()) + ggplot2::xlab("Cells")
return(list(p))
}
if (interactive == TRUE) {
if (! requireNamespace("plotly", quietly = TRUE)) {
stop("Package plotly needed for interactive == TRUE. Please install it: install.packages('plotly') or set interactive == FALSE")
}
color_plot <- df[, 3]
color_plot[df[, 3] == "Winner Epiblast"] <- "#DD6400"
color_plot[df[, 3] == "Intermediate"] <- "#0000FF"
color_plot[df[, 3] == "Loser Epiblast"] <- "#006400"
fig <- plotly::plot_ly(
data = df,
x = df[,1],
y = df[,2],
name = "Cluster",
type = "bar",
marker <- list(color = color_plot))
fig <- fig %>% plotly::layout(title = "MT coverage per cell",
xaxis = list(title = "Cells"),
yaxis = list(title = "MT coverage per thousand reads"))
return(list(fig))}
}
MitoHEAR:::plot_cells_coverage_epiblast_here(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
plot_cells_coverage_epiblast_here(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
sum_matrix=sum_matrix_qc
cells_selected=row.names(sum_matrix_qc)
cluster=cluster_ci
interactive=TRUE
cells_sum <- apply(sum_matrix[cells_selected, ], 1, sum)
cells_sum <- cells_sum/1000
cell_id <- names(cells_sum)
df <- data.frame(cell_id, cells_sum, cluster)
row.names(df) <- cell_id
df <- df[order(cells_sum, decreasing = T), ]
cell_id_plot <- factor(row.names(df), levels = row.names(df))
cluster_plot_plot <- factor(df[, 3], levels = c("Winner Epiblast", "Intermediate", "Loser Epiblast"))
color_plot <- df[, 3]
color_plot[df[, 3] == "Winner Epiblast"] <- "#DD6400"
color_plot[df[, 3] == "Intermediate"] <- "#0000FF"
color_plot[df[, 3] == "Loser Epiblast"] <- "#006400"
fig <- plotly::plot_ly(
data = df,
x = df[,1],
y = df[,2],
name = "Cluster",
type = "bar",
marker <- list(color = color_plot))
fig <- fig %>% plotly::layout(title = "MT coverage per cell",
xaxis = list(title = "Cells"),
yaxis = list(title = "MT coverage per thousand reads"))
fig
fig <- plotly::plot_ly(
data = df,
x = df[,1],
y = df[,2],
name = "Cluster",
type = "bar",
marker = list(color = color_plot))
fig = fig %>% plotly::layout(title = "MT coverage per cell",
xaxis = list(title = "Cells"),
yaxis = list(title = "MT coverage per thousand reads"))
fug
fig
fig <- plotly::plot_ly(
#data = df,
x = (cell_id_plot),
y = df[,2],
name = "Cluster",
type = "bar",
marker = list(color = color_plot))
fig = fig %>% plotly::layout(title = "MT coverage per cell",
xaxis = list(title = "Cells"),
yaxis = list(title = "MT coverage per thousand reads"))
fig
getwd()
devtools::build(vignettes = FALSE)
devtools::install()
library(MitoHEAR)
MitoHEAR:::plot_cells_coverage_epiblast_here(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
MitoHEAR:::plot_cells_coverage_epiblast(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=FALSE)
MitoHEAR:::plot_cells_coverage_epiblast(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
plot_cells_coverage(sum_matrix_qc, row.names(sum_matrix_qc), cluster_ci, interactive=TRUE)
plot_base_coverage(sum_matrix, sum_matrix_qc, row.names(sum_matrix_qc), interactive =  FALSE, text_size =  10)
plot_base_coverage(sum_matrix, sum_matrix_qc, row.names(sum_matrix_qc)[1], interactive =  FALSE, text_size =  10)
plot_base_coverage(sum_matrix, sum_matrix_qc, row.names(sum_matrix_qc)[1], interactive = TRUE, text_size = 10)
devtools::build()
devtools::install()
library(MitoHEAR)
plot_base_coverage(sum_matrix, sum_matrix_qc, row.names(sum_matrix_qc)[1], interactive = TRUE, text_size = 10)
chr_name =  "MT"
heteroplasmy_matrix =  heteroplasmy_matrix_ci
biomart_file =  system.file("extdata", "mt_start_end.txt", package = "MitoHEAR")
biomart_file =  read.table(biomart_file, sep =  "\t", header = T)
biomart_file
devtools::release()
spell_check()
?spell_check()
devtools::spell_check()
devtools::spell_check()
library(MitoHEAr)
MitoHEAR
library(MitoHEAR)
library(MitoHEAR)
?MitoHEAR::vi_vi_comparison
devtools::build(vignettes = FALSE)
