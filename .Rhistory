old_new_classification <- result_clustering_sc[[1]]
dist_matrix_sc <- result_clustering_sc[[2]]
top_dist <- result_clustering_sc[[3]]
common_idx <- result_clustering_sc[[4]]
old_classification <- as.vector(old_new_classification[, 1])
new_classification <- as.vector(old_new_classification[, 2])
Plot_distance_matrix(dist_matrix_sc, old_classification)
plot_distance_matrix(dist_matrix_sc, old_classification)
heatmap_plot(row.names(dist_matrix_sc), row.names(dist_matrix_sc), new_classification, old_classification, (dist_matrix_sc), cluster_columns = F, cluster_rows = F, "Euclidean distance")
plot_heatmap(new_classification, old_classification, (dist_matrix_sc), cluster_columns = F, cluster_rows = F, "Euclidean distance")
q <- list()
for ( i in 1:length(top_dist)){
p <- plot_heteroplasmy(top_dist[i], heteroplasmy_matrix_ci, cluster_ci, index_ci)
q <- list(q, p)
}
q
b <- 4
b
library(MitoHEAR)
load(system.file("extdata", "meta_data_antonio_final.Rda", package = "MitoHEAR"))
load(system.file("extdata", "output_SNP_antonio_mt.Rda", package = "MitoHEAR"))
matrix_allele_counts=output_SNP_antonio_mt[[1]]
name_position_allele=output_SNP_antonio_mt[[2]]
name_position=output_SNP_antonio_mt[[3]]
row.names(meta_data_antonio_final)=meta_data_antonio_final$antonio_array.Comment.ENA_RUN.
meta_data_antonio_final=meta_data_antonio_final[row.names(matrix_allele_counts),]
row.names(matrix_allele_counts)=meta_data_antonio_final$antonio_array.Source.Name
row.names(meta_data_antonio_final)=meta_data_antonio_final$antonio_array.Source.Name
row.names(meta_data_antonio_final)=meta_data_antonio_final$antonio_array.Comment.ENA_RUN.
meta_data_antonio_final=meta_data_antonio_final[row.names(matrix_allele_counts),]
row.names(matrix_allele_counts)=meta_data_antonio_final$antonio_array.Source.Name
row.names(meta_data_antonio_final)=meta_data_antonio_final$antonio_array.Source.Name
matrix_allele_counts=output_SNP_antonio_mt[[1]]
name_position_allele=output_SNP_antonio_mt[[2]]
name_position=output_SNP_antonio_mt[[3]]
row.names(meta_data_antonio_final)=meta_data_antonio_final$antonio_array.Comment.ENA_RUN.
load(system.file("extdata", "meta_data_antonio_final.Rda", package = "MitoHEAR"))
load(system.file("extdata", "output_SNP_antonio_mt.Rda", package = "MitoHEAR"))
matrix_allele_counts=output_SNP_antonio_mt[[1]]
name_position_allele=output_SNP_antonio_mt[[2]]
name_position=output_SNP_antonio_mt[[3]]
row.names(meta_data_antonio_final)=meta_data_antonio_final$antonio_array.Comment.ENA_RUN.
meta_data_antonio_final=meta_data_antonio_final[row.names(matrix_allele_counts),]
row.names(matrix_allele_counts)=meta_data_antonio_final$antonio_array.Source.Name
row.names(meta_data_antonio_final)=meta_data_antonio_final$antonio_array.Source.Name
sc_data_all=get_heteroplasmy(matrix_allele_counts,name_position_allele,name_position,50,2000,filtering = 1)
sum_matrix=sc_data_all[[1]]
sum_matrix_qc=sc_data_all[[2]]
heteroplasmy_matrix_sc=sc_data_all[[3]]
allele_matrix_sc=sc_data_all[[4]]
cluster_sc=as.character(meta_data_antonio_final[row.names(heteroplasmy_matrix_sc),]$antonio_array.Characteristics.developmental.stage.)
index_sc=sc_data_all[[5]]
plot_heteroplasmy_variability(heteroplasmy_matrix_sc,cluster_sc,threshold=0.1,frac=FALSE,index_sc)
plot_heteroplasmy_variability(heteroplasmy_matrix_sc,cluster_sc,threshold=0.1,frac=TRUE,index_sc)
stage_2_cells=row.names(matrix_allele_counts)[grep("2cell_",row.names(matrix_allele_counts))]
stage_2_cells=stage_2_cells[!grepl("32cell_",stage_2_cells)]
sc_data=get_heteroplasmy(matrix_allele_counts[stage_2_cells,],name_position_allele,name_position,50,2000,filtering = 1)
sum_matrix=sc_data[[1]]
sum_matrix_qc=sc_data[[2]]
heteroplasmy_matrix_sc=sc_data[[3]]
allele_matrix_sc=sc_data[[4]]
cluster_sc=as.character(meta_data_antonio_final[row.names(heteroplasmy_matrix_sc),]$antonio_array.Characteristics.developmental.stage.)
condition_sc=rep(0,length(cluster_sc))
condition_sc[grep("2cell_1_",row.names(heteroplasmy_matrix_sc))]="1"
condition_sc[grep("2cell_2_",row.names(heteroplasmy_matrix_sc))]="2"
condition_sc[grep("2cell_3_",row.names(heteroplasmy_matrix_sc))]="3"
condition_sc[grep("2cell_4_",row.names(heteroplasmy_matrix_sc))]="4"
condition_sc[grep("2cell_5_",row.names(heteroplasmy_matrix_sc))]="5"
condition_sc[grep("2cell_6_",row.names(heteroplasmy_matrix_sc))]="6"
condition_sc[grep("2cell_7_",row.names(heteroplasmy_matrix_sc))]="7"
condition_sc[grep("2cell_8_",row.names(heteroplasmy_matrix_sc))]="8"
index_sc=sc_data[[5]]
name_position_allele_qc=name_position_allele[name_position%in%colnames(sum_matrix_qc)]
name_position_qc=name_position[name_position%in%colnames(sum_matrix_qc)]
result_clustering_sc=clustering_angular_distance(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=2,0.2,min_value=0.001,index=index_sc,relevant_bases = NULL)
old_new_classification=result_clustering_sc[[1]]
dist_matrix_sc=result_clustering_sc[[2]]
top_dist=result_clustering_sc[[3]]
common_idx=result_clustering_sc[[4]]
old_classification=as.vector(old_new_classification[,1])
new_classification=as.vector(old_new_classification[,2])
Plot_distance_matrix(dist_matrix_sc,old_classification)
plot_distance_matrix(dist_matrix_sc,old_classification)
heatmap_plot(row.names(dist_matrix_sc),row.names(dist_matrix_sc),new_classification,old_classification,(dist_matrix_sc),cluster_columns=F,cluster_rows=F,"Euclidean distance")
heatmap_plot(new_classification,old_classification,(dist_matrix_sc),cluster_columns=F,cluster_rows=F,"Euclidean distance")
plot_heatmap(new_classification,old_classification,(dist_matrix_sc),cluster_columns=F,cluster_rows=F,"Euclidean distance")
q=list()
for ( i in 1:length(top_dist)){
p=plot_heteroplasmy(top_dist[i],heteroplasmy_matrix_sc,condition_sc,index_sc)
q=list(q,p)
}
q
min_frac=c(0.1,0.01,0.001,0.0001)
choose_features_clustering(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,top_pos=length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=2,min_frac,0.2,index = index_sc)
vi_comparison(old_classification,new_classification,1000)
index_sc
choose_features_clustering(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,top_pos=length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=2,min_frac,0.2,index = index_sc)
bo=choose_features_clustering(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,top_pos=length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=2,min_frac,0.2,index = index_sc)
bo
choose_features_clustering
heteroplasmy_matrix=heteroplasmy_matrix_sc
allele_matrix=allele_matrix_sc
cluster=condition_sc
top_pos=length(colnames(heteroplasmy_matrix_sc))
deepSplit_param=0
minClusterSize_param=2
min_value_vector=min_frac
threshold=0.2
index = index_s
index = index_sc
res_ang <- rep(0, length(colnames(heteroplasmy_matrix)))
res_ang <- as.list(res_ang)
names(res_ang) <- colnames(heteroplasmy_matrix)
j <- 1
for (i in 1:length(colnames(heteroplasmy_matrix))) {
allele_matrix_2_1 <- allele_matrix[, (j:(j + 3))]
dist_ang_pos <- rdist::pdist(allele_matrix_2_1, metric = "angular")
res_ang[[i]] <- dist_ang_pos
res_ang[[i]][is.na(res_ang[[i]])] <- 0
j <- j + 4
}
res_ang_square <- lapply(res_ang, FUN = function(x) {
return(x^2)
})
var_dist <- lapply(res_ang_square, FUN = function(x) {
distance_vector <- as.vector(as.dist(x))
if (length(distance_vector) == 1) {
return(0)
}
else {
return(var(distance_vector))
}
})
mean_dist <- lapply(res_ang_square, FUN = function(x) {
return(mean(as.vector(as.dist(x))))
})
var_dist <- as.numeric(var_dist)
names(var_dist) <- names(res_ang)
var_dist <- var_dist[order(var_dist, decreasing = T)]
mean_max <- apply(heteroplasmy_matrix[, names(var_dist)],
2, function(x) {
if (sum(x >= threshold) > max_frac * length(x)) {
return(FALSE)
}
else (return(TRUE))
})
max_frac=0.7
res_ang <- rep(0, length(colnames(heteroplasmy_matrix)))
res_ang <- as.list(res_ang)
names(res_ang) <- colnames(heteroplasmy_matrix)
j <- 1
for (i in 1:length(colnames(heteroplasmy_matrix))) {
allele_matrix_2_1 <- allele_matrix[, (j:(j + 3))]
dist_ang_pos <- rdist::pdist(allele_matrix_2_1, metric = "angular")
res_ang[[i]] <- dist_ang_pos
res_ang[[i]][is.na(res_ang[[i]])] <- 0
j <- j + 4
}
res_ang_square <- lapply(res_ang, FUN = function(x) {
return(x^2)
})
var_dist <- lapply(res_ang_square, FUN = function(x) {
distance_vector <- as.vector(as.dist(x))
if (length(distance_vector) == 1) {
return(0)
}
else {
return(var(distance_vector))
}
})
mean_dist <- lapply(res_ang_square, FUN = function(x) {
return(mean(as.vector(as.dist(x))))
})
var_dist <- as.numeric(var_dist)
names(var_dist) <- names(res_ang)
var_dist <- var_dist[order(var_dist, decreasing = T)]
mean_max <- apply(heteroplasmy_matrix[, names(var_dist)],
2, function(x) {
if (sum(x >= threshold) > max_frac * length(x)) {
return(FALSE)
}
else (return(TRUE))
})
if (all(!as.vector(mean_max))) {
percentage_frac <- max_frac * 100
stop(paste0("All the bases have heteroplasmy greater than ",
threshold, " in more than", percentage_frac,
"% of cells"))
}
var_dist <- var_dist[as.vector(mean_max)]
number_pos <- rep(list(0), length(min_value_vector))
for (i in 1:length(min_value_vector)) {
if (length(var_dist) >= top_pos) {
var_dist_top_all <- var_dist[1:top_pos]
var_dist_sum <- rep(0, length(var_dist_top_all))
if (sum(var_dist_top_all) == 0) {
stop("All the bases has variance 0 across samples")
}
for (j in 1:length(var_dist_top_all)) {
var_dist_sum[j] <- var_dist_top_all[j]/sum(var_dist_top_all)
}
if (min_value_vector[i] >= var_dist_sum[2]) {
warning(paste0("There are not at least two bases with variance above  ",
min_value_vector[i], ".", "All the bases will be used."))
var_dist_top <- var_dist_top_all
}
if (min_value_vector[i] < var_dist_sum[2]) {
var_dist_top <- var_dist_top_all[var_dist_sum >
min_value_vector[i]]
}
}
if (length(var_dist) < top_pos) {
var_dist_top_all <- var_dist
warning(paste0("Less than ", top_pos, " bases present. All the bases will be used."))
var_dist_sum <- rep(0, length(var_dist_top_all))
if (sum(var_dist_top_all) == 0) {
stop("All the bases has variance 0 across samples")
}
for (j in 1:length(var_dist_top_all)) {
var_dist_sum[j] <- var_dist_top_all[j]/sum(var_dist_top_all)
}
if (min_value_vector[i] >= var_dist_sum[2]) {
warning(paste0("There are not at least two bases with variance above  ",
min_value_vector[i], ".", "All the bases will be used."))
var_dist_top <- var_dist_top_all
}
if (min_value_vector[i] < var_dist_sum[2]) {
var_dist_top <- var_dist_top_all[var_dist_sum >
min_value_vector[i]]
}
}
top_bases_dist <- names(var_dist_top)
res_ang_sel <- res_ang_square[which(names(res_ang) %in%
top_bases_dist)]
res_ang_sum <- Reduce("+", res_ang_sel)
dist_ang_matrix <- sqrt(res_ang_sum)
dist_ang_sqrt <- as.dist(dist_ang_matrix)
my.tree <- hclust(dist_ang_sqrt)
my.clusters <- dynamicTreeCut::cutreeHybrid(my.tree,
distM = as.matrix(dist_ang_sqrt), deepSplit = deepSplit_param,
minClusterSize = minClusterSize_param)$label
number_pos[[i]] <- my.clusters
names(number_pos[[i]]) <- rep(paste0("N", i), length(number_pos[[i]]))
}
df <- data.frame(matrix(unlist(number_pos), ncol = length(number_pos),
byrow = FALSE), stringsAsFactors = FALSE)
dim(df)
df
colnames(df) <- unique(names(unlist(number_pos)))
df
clustree::clustree(df, prefix = "N", node_size = 10,
layout = "sugiyama") + ggplot2::guides(edge_colour = FALSE,
edge_alpha = FALSE) + ggplot2::theme(legend.position = "bottom")
}
min_frac=c(0.1,0.01,0.001,0.0001)
bo=choose_features_clustering(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,top_pos=length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=2,min_frac,0.2,index = index_sc)
min_frac=c(0.1,0.01,0.001,0.0001)
choose_features_clustering(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,top_pos=length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=2,min_frac,0.2,index = index_sc)
?message
vi_comparison(old_classification,new_classification,1000)
stage_8_cells=row.names(matrix_allele_counts)[grep("8cell_",row.names(matrix_allele_counts))]
sc_data=get_heteroplasmy(matrix_allele_counts[stage_8_cells,],name_position_allele,name_position,50,2000,filtering = 1)
sum_matrix=sc_data[[1]]
sum_matrix_qc=sc_data[[2]]
heteroplasmy_matrix_sc=sc_data[[3]]
allele_matrix_sc=sc_data[[4]]
cluster_sc=as.character(meta_data_antonio_final[row.names(heteroplasmy_matrix_sc),]$antonio_array.Characteristics.developmental.stage.)
condition_sc=rep(0,length(cluster_sc))
condition_sc[grep("8cell_1_",row.names(heteroplasmy_matrix_sc))]="1"
condition_sc[grep("8cell_2_",row.names(heteroplasmy_matrix_sc))]="2"
condition_sc[grep("8cell_3_",row.names(heteroplasmy_matrix_sc))]="3"
condition_sc[grep("8cell_4_",row.names(heteroplasmy_matrix_sc))]="4"
index_sc=sc_data[[5]]
name_position_allele_qc=name_position_allele[name_position%in%colnames(sum_matrix_qc)]
name_position_qc=name_position[name_position%in%colnames(sum_matrix_qc)]
result_clustering_sc=clustering_dist_ang(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=8,0.2,min_value=0.001,index=index_sc,relevant_bases = NULL)
result_clustering_sc=clustering_angular_distance(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=8,0.2,min_value=0.001,index=index_sc,relevant_bases = NULL)
old_new_classification=result_clustering_sc[[1]]
dist_matrix_sc=result_clustering_sc[[2]]
top_dist=result_clustering_sc[[3]]
common_idx=result_clustering_sc[[4]]
old_classification=as.vector(old_new_classification[,1])
new_classification=as.vector(old_new_classification[,2])
Plot_distance_matrix(dist_matrix_sc,old_classification)
plot_distance_matrix(dist_matrix_sc,old_classification)
heatmap_plot(row.names(dist_matrix_sc),row.names(dist_matrix_sc),new_classification,old_classification,(dist_matrix_sc),cluster_columns=F,cluster_rows=F,"Euclidean distance")
plot_heatmap(new_classification,old_classification,(dist_matrix_sc),cluster_columns=F,cluster_rows=F,"Euclidean distance")
q=list()
for ( i in 1:length(top_dist)){
p=plot_heteroplasmy(top_dist[i],heteroplasmy_matrix_sc,condition_sc,index_sc)
q=list(q,p)
}
q
min_frac=c(0.1,0.01,0.001,0.0001)
choose_features_clustering(heteroplasmy_matrix_sc,allele_matrix_sc,condition_sc,top_pos=length(colnames(heteroplasmy_matrix_sc)),deepSplit_param=0,minClusterSize_param=8,min_frac,0.2,index = index_sc)
vi_comparison(old_classification,new_classification,1000)
utils::sessionInfo()
library(MitoHEAR)
load(system.file("extdata", "meta_data_ana_final_big.Rda", package = "MitoHEAR"))
load(system.file("extdata", "meta_data_ana_final_small.Rda", package = "MitoHEAR"))
cell_names=as.vector(meta_data_ana_final_big$name_cell)
cell_names_bulk=cell_names
load(system.file("extdata", "output_SNP_ana_mt.Rda", package = "MitoHEAR"))
matrix_allele_counts=output_SNP_ana_mt[[1]]
name_position_allele=output_SNP_ana_mt[[2]]
name_position=output_SNP_ana_mt[[3]]
row.names(meta_data_ana_final_big)=meta_data_ana_final_big$name_cell
meta_data_ana_final_big=meta_data_ana_final_big[row.names(matrix_allele_counts),]
delete_duplicate=meta_data_ana_final_big$name_cell[seq(1,48,3)]
meta_data_ana_final_big_filter=meta_data_ana_final_big[delete_duplicate,]
bulk_sample=meta_data_ana_final_big_filter$name_cell_original
matrix_allele_counts=matrix_allele_counts[delete_duplicate,]
row.names(matrix_allele_counts)=bulk_sample
row.names(meta_data_ana_final_small)=meta_data_ana_final_small$name_fastq
bulk_data_competition=get_heteroplasmy(matrix_allele_counts[bulk_sample,],name_position_allele,name_position,50,2000,filtering = 1)
sum_matrix=bulk_data_competition[[1]]
sum_matrix_qc=bulk_data_competition[[2]]
heteroplasmy_matrix_bulk=bulk_data_competition[[3]]
allele_matrix_bulk=bulk_data_competition[[4]]
cluster_bulk=as.character(meta_data_ana_final_small[row.names(heteroplasmy_matrix_bulk),]$status)
condition_bulk=as.character(meta_data_ana_final_small[row.names(heteroplasmy_matrix_bulk),]$condition)
index_bulk=bulk_data_competition[[5]]
name_position_allele_qc=name_position_allele[name_position%in%colnames(sum_matrix_qc)]
name_position_qc=name_position[name_position%in%colnames(sum_matrix_qc)]
relevant_bases=filter_bases(heteroplasmy_matrix_bulk,0.01,8)
max_entropy_base=get_distribution(heteroplasmy_matrix_bulk[,relevant_bases],"max")
mean_counts_base=get_distribution(sum_matrix_qc[,relevant_bases],"mean")
Plot_distribution(mean_counts_base,"mean counts/base","Distribution mean counts/base")
plot_distribution(mean_counts_base,"mean counts/base","Distribution mean counts/base")
p_value_wilcox_test=get_wilcox_test(heteroplasmy_matrix_bulk[,relevant_bases],cluster_bulk,"Loser","Winner" )
p_value_wilcox_test=get_wilcox_test(heteroplasmy_matrix_bulk[,relevant_bases],cluster_bulk,"Loser","Winner" )
p_value_wilcox_test_sort=sort(p_value_wilcox_test,decreasing = F)
q=list()
for ( i in 1:length(p_value_wilcox_test_sort[1:2])){
p=plot_heteroplasmy(names(p_value_wilcox_test_sort)[i],heteroplasmy_matrix_bulk,cluster_bulk)+ggplot2::ggtitle(paste(names(p_value_wilcox_test_sort)[i],round(p_value_wilcox_test_sort[i],4),sep="-"))
q=list(q,p)
}
q=list()
for ( i in 1:length(p_value_wilcox_test_sort[1:2])){
p=plot_heteroplasmy(names(p_value_wilcox_test_sort)[i],heteroplasmy_matrix_bulk,cluster_bulk,index_bulk)+ggplot2::ggtitle(paste(names(p_value_wilcox_test_sort)[i],round(p_value_wilcox_test_sort[i],4),sep="-"))
q=list(q,p)
}
q
q=list()
for ( i in names(p_value_wilcox_test_sort)[1:2]){
p=plot_allele_frequency(i,heteroplasmy_matrix_bulk,allele_matrix_bulk,cluster_bulk,name_position_qc,name_position_allele_qc,5)
q=list(q,p)
}
q=list()
for ( i in 1:length(p_value_wilcox_test_sort[1:2])){
p=plot_heteroplasmy(names(p_value_wilcox_test_sort)[i],heteroplasmy_matrix_bulk,cluster_bulk,index_bulk)+ggplot2::ggtitle(paste(names(p_value_wilcox_test_sort)[i],round(p_value_wilcox_test_sort[i],4),sep="-"))
q=list(q,p)
}
q
q=list()
for ( i in names(p_value_wilcox_test_sort)[1:2]){
p=plot_allele_frequency(i,heteroplasmy_matrix_bulk,allele_matrix_bulk,cluster_bulk,name_position_qc,name_position_allele_qc,5,index_bulk)
q=list(q,p)
}
q
utile=meta_data_ana_final_small[row.names(heteroplasmy_matrix_bulk),]
batch=rep(0,length(utile$condition))
batch[utile$status=="Loser"&utile$condition=="CO"]="Loser-CO"
batch[utile$status=="Loser"&utile$condition=="Sep"]="Loser-Sep"
batch[utile$status=="Winner"&utile$condition=="CO"]="Winner-CO"
batch[utile$status=="Winner"&utile$condition=="Sep"]="Winner-Sep"
cluster=utile$status
q=list()
for ( i in names(p_value_wilcox_test_sort)[1:2]){
p=plot_batch(i,heteroplasmy_matrix_bulk,batch,cluster,6)
q=list(q,p)
}
utile=meta_data_ana_final_small[row.names(heteroplasmy_matrix_bulk),]
batch=rep(0,length(utile$condition))
batch[utile$status=="Loser"&utile$condition=="CO"]="Loser-CO"
batch[utile$status=="Loser"&utile$condition=="Sep"]="Loser-Sep"
batch[utile$status=="Winner"&utile$condition=="CO"]="Winner-CO"
batch[utile$status=="Winner"&utile$condition=="Sep"]="Winner-Sep"
cluster=utile$status
q=list()
for ( i in names(p_value_wilcox_test_sort)[1:2]){
p=plot_batch(i,heteroplasmy_matrix_bulk,batch,cluster,6,index_bulk)
q=list(q,p)
}
q
result_clustering_sc=clustering_dist_ang(heteroplasmy_matrix_bulk,allele_matrix_bulk,cluster_bulk,length(colnames(heteroplasmy_matrix_bulk)),deepSplit_param=1,minClusterSize_param=8,0.2,min_value=0.001,index=index_bulk,relevant_bases = NULL)
result_clustering_sc=clustering_angular_distance(heteroplasmy_matrix_bulk,allele_matrix_bulk,cluster_bulk,length(colnames(heteroplasmy_matrix_bulk)),deepSplit_param=1,minClusterSize_param=8,0.2,min_value=0.001,index=index_bulk,relevant_bases = NULL)
old_new_classification=result_clustering_sc[[1]]
dist_matrix_sc=result_clustering_sc[[2]]
top_dist=result_clustering_sc[[3]]
common_idx=result_clustering_sc[[4]]
old_classification=as.vector(old_new_classification[,1])
new_classification=as.vector(old_new_classification[,2])
Plot_distance_matrix(dist_matrix_sc,old_classification)
plot_distance_matrix(dist_matrix_sc,old_classification)
q=list()
for ( i in 1:length(top_dist)){
p=plot_heteroplasmy(top_dist[i],heteroplasmy_matrix_bulk,cluster_bulk,index_bulk)
q=list(q,p)
}
q
q=list()
for ( i in 1:length(top_dist[1:2])){
p=plot_heteroplasmy(top_dist[i],heteroplasmy_matrix_bulk,cluster_bulk,index_bulk)
q=list(q,p)
}
q
plot_heatmap(new_classification,old_classification,(dist_matrix_sc),cluster_columns=F,cluster_rows=F,"Euclidean distance")
bg_path=system.file("extdata", "bg.fasta.txt", package = "MitoHEAR")
fastaFile <- Biostrings::readDNAStringSet(bg_path)
seq_name = names(fastaFile)
sequence = paste(fastaFile)
df_bg <- data.frame(seq_name, sequence)
bg_sequence=df_bg$sequence
hb_path=system.file("extdata", "hb.fasta.txt", package = "MitoHEAR")
fastaFile <- Biostrings::readDNAStringSet(hb_path)
seq_name = names(fastaFile)
sequence = paste(fastaFile)
df_hb <- data.frame(seq_name, sequence)
hb_sequence=df_hb$sequence
mt_path=system.file("extdata", "Mus_musculus.GRCm38.dna.chromosome.MT.fa", package = "MitoHEAR")
fastaFile <- Biostrings::readDNAStringSet(mt_path)
seq_name = names(fastaFile)
sequence = paste(fastaFile)
df_ref <- data.frame(seq_name, sequence)
ref_sequence=df_ref$sequence
hb_sequence=unlist(strsplit(hb_sequence,split=NULL))
ref_sequence=unlist(strsplit(ref_sequence,split=NULL))
bg_sequence=unlist(strsplit(bg_sequence,split=NULL))
hb_sequence=detect_insertion(ref_sequence,hb_sequence)
bg_sequence=detect_insertion(ref_sequence,bg_sequence)
position_kept=substr(colnames(heteroplasmy_matrix_bulk),1,nchar(colnames(heteroplasmy_matrix_bulk))-3)
position_kept=as.numeric(position_kept)
pos_diff_bg=bg_sequence[which(ref_sequence!=bg_sequence)]
index_diff_bg=which(ref_sequence!=bg_sequence)
pos_diff_bg=pos_diff_bg[index_diff_bg%in%position_kept]
index_loser=which(cluster_bulk=="Loser")
heteroplasmy_matrix_bulk_bg=heteroplasmy_matrix_bulk[index_loser,]
allele_matrix_bulk_bg=allele_matrix_bulk[index_loser,]
cluster_bulk_bg=cluster_bulk[index_loser]
mean_heteroplasmy=apply(heteroplasmy_matrix_bulk_bg,2,median)
mean_heteroplasmy_diff=mean_heteroplasmy[position_kept%in%index_diff_bg]
mean_heteroplasmy_equal=mean_heteroplasmy[!position_kept%in%index_diff_bg]
diff_pos=rep('Different Position',length(mean_heteroplasmy_diff))
equal_pos=rep('Equal Position',length(mean_heteroplasmy_equal))
cond_pos=c(diff_pos,equal_pos)
mean_pos=c(mean_heteroplasmy_diff,mean_heteroplasmy_equal)
Plot_boxplot(mean_heteroplasmy_diff,mean_heteroplasmy_equal,diff_pos,equal_pos,"Condition Position","Mean Heteroplasmy","BG_strain")
plot_boxplot(mean_heteroplasmy_diff,mean_heteroplasmy_equal,diff_pos,equal_pos,"Condition Position","Mean Heteroplasmy","BG_strain")
plot_condition(mean_heteroplasmy_diff,mean_heteroplasmy_equal,diff_pos,equal_pos,"Condition Position","Mean Heteroplasmy","BG_strain")
position_name_diff_bg=colnames(heteroplasmy_matrix_bulk_bg)[position_kept%in%index_diff_bg]
q=list()
for ( i in 1:length(position_name_diff_bg[1:2])){
p=plot_allele_frequency(position_name_diff_bg[i],heteroplasmy_matrix_bulk_bg,allele_matrix_bulk_bg,cluster_bulk_bg,name_position_qc,name_position_allele_qc,5)
q=list(q,p)
}
position_name_diff_bg=colnames(heteroplasmy_matrix_bulk_bg)[position_kept%in%index_diff_bg]
q=list()
for ( i in 1:length(position_name_diff_bg[1:2])){
p=plot_allele_frequency(position_name_diff_bg[i],heteroplasmy_matrix_bulk_bg,allele_matrix_bulk_bg,cluster_bulk_bg,name_position_qc,name_position_allele_qc,5,index_bulk)
q=list(q,p)
}
q
for ( i in 1:length(position_name_diff_bg[1:2])){
print(paste("Reference allele in the strain:",pos_diff_bg[i]))}
pos_diff_hb=hb_sequence[which(ref_sequence!=hb_sequence)]
index_diff_hb=which(ref_sequence!=hb_sequence)
pos_diff_hb=pos_diff_hb[index_diff_hb%in%position_kept]
index_winner=which(cluster_bulk=="Winner")
heteroplasmy_matrix_bulk_hb=heteroplasmy_matrix_bulk[index_winner,]
allele_matrix_bulk_hb=allele_matrix_bulk[index_winner,]
cluster_bulk_hb=cluster_bulk[index_winner]
mean_heteroplasmy=apply(heteroplasmy_matrix_bulk_hb,2,median)
mean_heteroplasmy_diff=mean_heteroplasmy[position_kept%in%index_diff_hb]
mean_heteroplasmy_equal=mean_heteroplasmy[!position_kept%in%index_diff_hb]
diff_pos=rep('Different Position',length(mean_heteroplasmy_diff))
equal_pos=rep('Equal Position',length(mean_heteroplasmy_equal))
cond_pos=c(diff_pos,equal_pos)
mean_pos=c(mean_heteroplasmy_diff,mean_heteroplasmy_equal)
Plot_boxplot(mean_heteroplasmy_diff,mean_heteroplasmy_equal,diff_pos,equal_pos,"Condition Position","Mean Heteroplasmy","HB_strain")
plot_condition(mean_heteroplasmy_diff,mean_heteroplasmy_equal,diff_pos,equal_pos,"Condition Position","Mean Heteroplasmy","HB_strain")
position_name_diff_hb=colnames(heteroplasmy_matrix_bulk_hb)[position_kept%in%index_diff_hb]
q=list()
for ( i in 1:length(position_name_diff_hb[1:2])){
p=plot_allele_frequency(position_name_diff_hb[i],heteroplasmy_matrix_bulk_hb,allele_matrix_bulk_hb,cluster_bulk_hb,name_position_qc,name_position_allele_qc,5)
q=list(q,p)
}
position_name_diff_hb=colnames(heteroplasmy_matrix_bulk_hb)[position_kept%in%index_diff_hb]
q=list()
for ( i in 1:length(position_name_diff_hb[1:2])){
p=plot_allele_frequency(position_name_diff_hb[i],heteroplasmy_matrix_bulk_hb,allele_matrix_bulk_hb,cluster_bulk_hb,name_position_qc,name_position_allele_qc,5,index_bulk)
q=list(q,p)
}
q
for ( i in 1:length(position_name_diff_hb[1:2])){
print(paste("Reference allele in the #strain:",pos_diff_hb[i]))
}
all_position_name_diff=c(position_name_diff_bg,position_name_diff_hb)
sum(unique(all_position_name_diff)%in%names(p_value_wilcox_test_sort)[1:50])/50
utils::sessionInfo()
detect_insertion
getwd()
pwd
getwd()
devtools::build(vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
vignette("MitoHEAR")
?browseVignettes
browseVignettes("MitoHEAR")
vignette("Ludiwig_et_al_example_notebook")
vignette("Ludwig_et_al_example_notebook")
browseVignettes()
