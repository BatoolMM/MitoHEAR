% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_heteroplasmy.R
\name{get_heteroplasmy}
\alias{get_heteroplasmy}
\title{get_heteroplasmy}
\usage{
get_heteroplasmy(
  raw_counts_allele,
  name_position_allele,
  name_position,
  number_reads,
  number_positions,
  filtering = 1,
  my.clusters = NULL
)
}
\arguments{
\item{raw_counts_allele}{A raw counts matrix obtained from
\emph{get_raw_counts_allele}.}

\item{name_position_allele}{A character vector with elements specifyng the
genomic coordinate of the base and the allele (obtained from
\emph{get_raw_counts_allele}).}

\item{name_position}{A character vector with elements specifyng the genomic
coordinate of the base (obtained from \emph{get_raw_counts_allele}).}

\item{number_reads}{Integer specifying the minimun number of counts above
which we consider the base covered by the sample.}

\item{number_positions}{Integer specifying the minimun number of bases that
must be covered by the sample (with counts>number_reads), in order to keep
the sample for down-stream analysis.}

\item{filtering}{Numeric value equal to 1 or 2. If 1 then only the bases
that are covered by all the samples are kept for the downstream analysis. If
2 then all the bases that are covered by more than 50\% of the the samples
in each cluster (specified by my.clusters) are kept for the down-stream
analysis. Default is 1.}

\item{my.clusters}{Charachter vector specifying a partition of the samples.
It is only used when filtering is equal to 2. Deafult is NULL}
}
\value{
It returns a list with 5 elements:

\item{sum_matrix}{A matrix (n_row=number of sample, n_col=number of bases)
with the counts for each sample/base, for all the initial samples and bases
included in the raw counts allele matrix.}

\item{sum_matrix_qc}{A matrix (n_row=number of sample, n_col=number of
bases) with the counts for each sample/base, for all the samples and bases
that pass the two consequentially filtering steps.}

\item{heteroplasmy_matrix}{A matrix with the same dimension of sum_matrix_qc
where each entry (i,j) is the heteroplasmy for sample i in base j.}

\item{norm_counts_allele_filter_qc}{A matrix (n_row=number of sample,
n_col=4*number of bases) with allele frequencies, for all the samples and
bases that pass the two consequentially filtering steps.}

\item{index}{If filtering is equal to 2: indices of all the samples that
cover a base, for all bases and samples that pass the two consequentially
filtering steps; if filtering equal to 1: NULL }
}
\description{
It is one of the two main functions of the \strong{MitoHEAR} package
(together with \emph{get_raw_counts_allele}). It computes the allele
frequencies and the heteroplasmy matrix starting from the counts matrix
obtained with \emph{get_raw_counts_allele}.
}
\details{
Starting from raw counts allele matrix, the function performed two
consequentially filtering steps. The first one is on the samples, keeping
only the ones that cover a number of bases above number_positions. The
second one is on the bases, defined by the parameter filtering. The
heteroplasmy for each sample-base pair is computed as \emph{1-max(f)}, where
\emph{f} are the frequencies of the four alleles.
}
\examples{

load(system.file("extdata", "after_qc.Rda", package = "MitoHEAR"))
load(system.file("extdata", "output_SNP_mt.Rda", package = "MitoHEAR"))
row.names(after_qc)=after_qc$new_name
cells_fmk_epi=after_qc[(after_qc$condition=="Cell competition OFF")&
(after_qc$cluster==1|after_qc$cluster==3|after_qc$cluster==4),"new_name"]
after_qc_fmk_epi=after_qc[cells_fmk_epi,]
my.clusters=after_qc_fmk_epi$cluster

matrix_allele_counts=output_SNP_mt[[1]]
name_position_allele=output_SNP_mt[[2]]
name_position=output_SNP_mt[[3]]
epiblast_ci=get_heteroplasmy(matrix_allele_counts[cells_fmk_epi,],
name_position_allele,name_position,number_reads=50,number_positions=2000,
filtering = 2,my.clusters)


sum_matrix=epiblast_ci[[1]]
sum_matrix_qc=epiblast_ci[[2]]
heteroplasmy_matrix_ci=epiblast_ci[[3]]
allele_matrix_ci=epiblast_ci[[4]]
index=epiblast_ci[[5]]

}
\author{
Gabriele Lubatti <gabriele.lubatti@helmholtz-muenchen.de>
}
